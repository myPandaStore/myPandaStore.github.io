(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{612:function(_,v,t){_.exports=t.p+"assets/img/012.f4e3fbee.png"},613:function(_,v,t){_.exports=t.p+"assets/img/013.8328290d.png"},707:function(_,v,t){"use strict";t.r(v);var s=t(15),r=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h2",{attrs:{id:"_1-tcp-和-udp的概念及特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-和-udp的概念及特点"}},[_._v("#")]),_._v(" 1.TCP 和 UDP的概念及特点")]),_._v(" "),s("p",[_._v("TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：")]),_._v(" "),s("h3",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),s("p",[_._v("TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。")]),_._v(" "),s("p",[_._v("它有以下几个特点：")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("面向连接")]),_._v("，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。")]),_._v(" "),s("li",[s("strong",[_._v("仅支持单播传输")]),_._v(".每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。")]),_._v(" "),s("li",[s("strong",[_._v("面向字节流")]),_._v(".TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。")]),_._v(" "),s("li",[s("strong",[_._v("可靠传输")]),_._v(".对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。")]),_._v(" "),s("li",[s("strong",[_._v("提供拥塞控制")]),_._v(",当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。")]),_._v(" "),s("li",[s("strong",[_._v("提供全双工通信")]),_._v(",TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）")])]),_._v(" "),s("h3",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[_._v("#")]),_._v(" UDP")]),_._v(" "),s("p",[_._v("UDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。")]),_._v(" "),s("p",[_._v("它的特点如下：")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("面向无连接")]),_._v(",首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作.在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下的 UDP 协议，然后就传递给网络层了。在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作。")]),_._v(" "),s("li",[s("strong",[_._v("有单播，多播，广播的功能")]),_._v("，UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。")]),_._v(" "),s("li",[s("strong",[_._v("面向报文")]),_._v("，发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文。")]),_._v(" "),s("li",[s("strong",[_._v("不可靠性")]),_._v("，首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是"),s("strong",[_._v("优点")]),_._v("也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。")]),_._v(" "),s("li",[s("strong",[_._v("头部开销小，传输数据报文时是很高效的")]),_._v("。")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(612),alt:""}})]),_._v(" "),s("p",[_._v("UDP 头部包含了以下几个数据：")]),_._v(" "),s("ul",[s("li",[_._v("两个十六位的端口号，分别为源端口（可选字段）和目标端口")]),_._v(" "),s("li",[_._v("整个数据报文的长度")]),_._v(" "),s("li",[_._v("整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误")])]),_._v(" "),s("p",[_._v("因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。")]),_._v(" "),s("h2",{attrs:{id:"_2-tcp和udp的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp和udp的区别"}},[_._v("#")]),_._v(" 2.TCP和UDP的区别")]),_._v(" "),s("p",[s("img",{attrs:{src:t(613),alt:""}})]),_._v(" "),s("h2",{attrs:{id:"_3-tcp和udp的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp和udp的使用场景"}},[_._v("#")]),_._v(" 3.TCP和UDP的使用场景")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("TCP应用场景")]),_._v("： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。")]),_._v(" "),s("li",[s("strong",[_._v("UDP应用场景")]),_._v("： 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。")])]),_._v(" "),s("h2",{attrs:{id:"_4-udp协议为什么不可靠"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-udp协议为什么不可靠"}},[_._v("#")]),_._v(" 4.UDP协议为什么不可靠？")]),_._v(" "),s("p",[_._v("UDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：")]),_._v(" "),s("ul",[s("li",[_._v("不保证消息交付：不确认，不重传，无超时")]),_._v(" "),s("li",[_._v("不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞")]),_._v(" "),s("li",[_._v("不跟踪连接状态：不必建立连接或重启状态机")]),_._v(" "),s("li",[_._v("不进行拥塞控制：不内置客户端或网络反馈机制")])]),_._v(" "),s("h2",{attrs:{id:"_5-tcp的重传机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-tcp的重传机制"}},[_._v("#")]),_._v(" 5.TCP的重传机制")]),_._v(" "),s("p",[_._v("由于TCP的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。")]),_._v(" "),s("p",[_._v("TCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。")])])}),[],!1,null,null,null);v.default=r.exports}}]);