(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{602:function(v,_,t){v.exports=t.p+"assets/img/001.666d7d20.jpg"},603:function(v,_,t){v.exports=t.p+"assets/img/002.1f6a5e17.jpg"},604:function(v,_,t){v.exports=t.p+"assets/img/003.8c6eb753.png"},605:function(v,_,t){v.exports=t.p+"assets/img/004.745636dd.png"},695:function(v,_,t){"use strict";t.r(_);var e=t(15),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"_1-当在浏览器中输入-google-com-并且按下回车之后发生了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-当在浏览器中输入-google-com-并且按下回车之后发生了什么"}},[v._v("#")]),v._v(" 1.当在浏览器中输入 Google.com 并且按下回车之后发生了什么？")]),v._v(" "),e("p",[v._v("(1). "),e("strong",[v._v("解析URL")]),v._v("： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。"),e("br"),v._v("\n(2). "),e("strong",[v._v("缓存判断")]),v._v("： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。"),e("br"),v._v("\n(3). "),e("strong",[v._v("DNS解析")]),v._v("： 下一步首先需要获取的是输入的 URL 中的域名的 "),e("strong",[v._v("IP 地址")]),v._v("，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。"),e("br"),v._v("\n(4) "),e("strong",[v._v("获取MAC地址")]),v._v("： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。"),e("br"),v._v("\n(5) "),e("strong",[v._v("TCP三次握手")]),v._v("： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。"),e("br"),v._v("\n(6) "),e("strong",[v._v("HTTPS握手")]),v._v("： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。"),e("br"),v._v("\n(7) "),e("strong",[v._v("返回数据")]),v._v("： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。"),e("br"),v._v("\n(8) "),e("strong",[v._v("页面渲染")]),v._v("： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。"),e("br"),v._v("\n(9) "),e("strong",[v._v("TCP四次挥手")]),v._v("： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。")]),v._v(" "),e("p",[v._v("TCP三次握手示意图：\n"),e("img",{attrs:{src:t(602),alt:""}})]),v._v(" "),e("p",[v._v("TCP四次挥手示意图：\n"),e("img",{attrs:{src:t(603),alt:""}})]),v._v(" "),e("h2",{attrs:{id:"_2-对keep-alive的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对keep-alive的理解"}},[v._v("#")]),v._v(" 2.对keep-alive的理解")]),v._v(" "),e("p",[v._v("HTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是"),e("strong",[v._v("短连接")]),v._v("。当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是"),e("strong",[v._v("长连接")]),v._v("。其使用方法如下：")]),v._v(" "),e("ul",[e("li",[v._v("HTTP1.0版本是默认没有Keep-alive的，所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；")]),v._v(" "),e("li",[v._v("HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。")])]),v._v(" "),e("p",[v._v("Keep-Alive的建立过程：")]),v._v(" "),e("ul",[e("li",[v._v("客户端向服务器在发送请求报文同时在首部添加发送Connection字段")]),v._v(" "),e("li",[v._v("服务器收到请求并处理 Connection字段")]),v._v(" "),e("li",[v._v("服务器回送Connection:Keep-Alive字段给客户端")]),v._v(" "),e("li",[v._v("客户端接收到Connection字段")]),v._v(" "),e("li",[v._v("Keep-Alive连接建立成功")])]),v._v(" "),e("p",[v._v("服务端自动断开过程（也就是没有keep-alive）：")]),v._v(" "),e("ul",[e("li",[v._v("客户端向服务器只是发送内容报文（不包含Connection字段）")]),v._v(" "),e("li",[v._v("服务器收到请求并处理")]),v._v(" "),e("li",[v._v("服务器返回客户端请求的资源并关闭连接")]),v._v(" "),e("li",[v._v("客户端接收资源，发现没有Connection字段，断开连接")])]),v._v(" "),e("p",[v._v("客户端请求断开连接过程：")]),v._v(" "),e("ul",[e("li",[v._v("客户端向服务器发送Connection:close字段")]),v._v(" "),e("li",[v._v("服务器收到请求并处理connection字段")]),v._v(" "),e("li",[v._v("服务器回送响应资源并断开连接")]),v._v(" "),e("li",[v._v("客户端接收资源并断开连接")])]),v._v(" "),e("p",[v._v("开启Keep-Alive的优点：")]),v._v(" "),e("ul",[e("li",[v._v("较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；")]),v._v(" "),e("li",[v._v("允许请求和应答的HTTP管线化；")]),v._v(" "),e("li",[v._v("降低拥塞控制 （TCP连接减少了）；")]),v._v(" "),e("li",[v._v("减少了后续请求的延迟（⽆需再进⾏握⼿）；")]),v._v(" "),e("li",[v._v("报告错误⽆需关闭TCP连；")])]),v._v(" "),e("p",[v._v("开启Keep-Alive的缺点：")]),v._v(" "),e("ul",[e("li",[v._v("长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。")])]),v._v(" "),e("h2",{attrs:{id:"_3-页面有多张图片-http是怎样的加载表现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-页面有多张图片-http是怎样的加载表现"}},[v._v("#")]),v._v(" 3.页面有多张图片，HTTP是怎样的加载表现？")]),v._v(" "),e("ul",[e("li",[v._v("在HTTP 1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。")]),v._v(" "),e("li",[v._v("在HTTP 2下，可以一瞬间加载出来很多资源，因为，HTTP2支持"),e("strong",[v._v("多路复用")]),v._v("，可以在一个TCP连接中发送多个HTTP请求。")])]),v._v(" "),e("h2",{attrs:{id:"_4-http2的头部压缩算法是怎样的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http2的头部压缩算法是怎样的"}},[v._v("#")]),v._v(" 4.HTTP2的头部压缩算法是怎样的？")]),v._v(" "),e("p",[v._v("HTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率")]),v._v(" "),e("p",[v._v("具体来说:")]),v._v(" "),e("ul",[e("li",[v._v("在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；")]),v._v(" "),e("li",[v._v("首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；")]),v._v(" "),e("li",[v._v("每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。")])]),v._v(" "),e("h2",{attrs:{id:"_5-http请求报文的是什么样的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-http请求报文的是什么样的"}},[v._v("#")]),v._v(" 5.HTTP请求报文的是什么样的？")]),v._v(" "),e("p",[v._v("请求报⽂有4部分组成:")]),v._v(" "),e("ul",[e("li",[v._v("请求⾏")]),v._v(" "),e("li",[v._v("请求头部")]),v._v(" "),e("li",[v._v("空⾏")]),v._v(" "),e("li",[v._v("请求体")])]),v._v(" "),e("p",[e("img",{attrs:{src:t(604),alt:""}})]),v._v(" "),e("p",[v._v("其中：")]),v._v(" "),e("p",[v._v("(1) 请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 "),e("br"),v._v("\n(2) 请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔"),e("br")]),v._v(" "),e("ul",[e("li",[v._v("User-Agent：产⽣请求的浏览器类型。")]),v._v(" "),e("li",[v._v("Accept：客户端可识别的内容类型列表。")]),v._v(" "),e("li",[v._v("Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。")])]),v._v(" "),e("p",[v._v("(3) 请求体: post put等请求携带的数据")]),v._v(" "),e("p",[e("img",{attrs:{src:t(605),alt:""}})])])}),[],!1,null,null,null);_.default=i.exports}}]);