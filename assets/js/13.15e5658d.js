(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{599:function(_,v,t){_.exports=t.p+"assets/img/005.939a0ad4.png"},600:function(_,v,t){_.exports=t.p+"assets/img/006.a5b5e0c1.png"},601:function(_,v,t){_.exports=t.p+"assets/img/007.4e17d399.png"},693:function(_,v,t){"use strict";t.r(v);var s=t(15),T=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h2",{attrs:{id:"_1-http响应报文的是什么样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-http响应报文的是什么样的"}},[_._v("#")]),_._v(" 1. HTTP响应报文的是什么样的？")]),_._v(" "),s("p",[_._v("响应报⽂由4部分组成:")]),_._v(" "),s("ul",[s("li",[_._v("响应⾏: 由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。")]),_._v(" "),s("li",[_._v("响应头：响应部⾸组成")]),_._v(" "),s("li",[_._v("空⾏")]),_._v(" "),s("li",[_._v("响应体: 服务器响应的数据")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(599),alt:""}})]),_._v(" "),s("h2",{attrs:{id:"_2-http协议的优点和缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-http协议的优点和缺点"}},[_._v("#")]),_._v(" 2.HTTP协议的优点和缺点")]),_._v(" "),s("p",[_._v("HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。")]),_._v(" "),s("p",[_._v("HTTP协议具有以下优点：")]),_._v(" "),s("ul",[s("li",[_._v("支持客户端/服务器模式")]),_._v(" "),s("li",[s("strong",[_._v("简单快速")]),_._v("：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。")]),_._v(" "),s("li",[s("strong",[_._v("无连接")]),_._v("：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。")]),_._v(" "),s("li",[s("strong",[_._v("无状态")]),_._v("：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。")]),_._v(" "),s("li",[s("strong",[_._v("灵活")]),_._v("：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。")])]),_._v(" "),s("p",[_._v("HTTP协议具有以下缺点：")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("无状态")]),_._v("： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。")]),_._v(" "),s("li",[s("strong",[_._v("明文传输")]),_._v("： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。")])]),_._v(" "),s("h2",{attrs:{id:"_3-http-3-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-3-0"}},[_._v("#")]),_._v(" 3.HTTP 3.0")]),_._v(" "),s("p",[_._v("HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(600),alt:""}})]),_._v(" "),s("ol",[s("li",[_._v("流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。")]),_._v(" "),s("li",[_._v("集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。")]),_._v(" "),s("li",[_._v("多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。")]),_._v(" "),s("li",[_._v("快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。")])]),_._v(" "),s("h2",{attrs:{id:"_4-http协议的性能怎么样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-http协议的性能怎么样"}},[_._v("#")]),_._v(" 4.HTTP协议的性能怎么样")]),_._v(" "),s("p",[_._v("HTTP 协议是基于 TCP/IP，并且使用了请求-应答的通信模式，所以性能的关键就在这两点里。")]),_._v(" "),s("ul",[s("li",[_._v("长连接")])]),_._v(" "),s("p",[_._v("HTTP协议有两种连接模式，一种是持续连接，一种非持续连接。\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。")]),_._v(" "),s("p",[_._v("对于不同版本的采用不同的连接方式：")]),_._v(" "),s("ul",[s("li",[_._v("在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。")]),_._v(" "),s("li",[_._v("在HTTP/1.1 提出了"),s("strong",[_._v("长连接")]),_._v("的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(601),alt:""}})]),_._v(" "),s("ul",[s("li",[_._v("管道网络传输")])]),_._v(" "),s("p",[_._v("HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。")]),_._v(" "),s("p",[_._v("管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。")]),_._v(" "),s("ul",[s("li",[_._v("队头堵塞")])]),_._v(" "),s("p",[_._v("HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。")]),_._v(" "),s("p",[_._v("队头阻塞的解决方案： "),s("br"),_._v("\n(1) 并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。 "),s("br"),_._v("\n(2) 域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。")]),_._v(" "),s("h2",{attrs:{id:"_5-url有哪些组成部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-url有哪些组成部分"}},[_._v("#")]),_._v(" 5.URL有哪些组成部分")]),_._v(" "),s("p",[_._v("以下面的URL为例：www.aspxfans.com:8080/news/index.…")]),_._v(" "),s("p",[_._v("从上面的URL可以看出，一个完整的URL包括以下几部分：")]),_._v(" "),s("ul",[s("li",[s("strong",[_._v("协议部分")]),_._v('：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在"HTTP"后面的“//”为分隔符；')]),_._v(" "),s("li",[s("strong",[_._v("域名部分")]),_._v("：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用")]),_._v(" "),s("li",[s("strong",[_._v("端口部分")]),_._v("：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）")]),_._v(" "),s("li",[s("strong",[_._v("虚拟目录部分")]),_._v("：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；")]),_._v(" "),s("li",[s("strong",[_._v("锚部分")]),_._v("：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；")]),_._v(" "),s("li",[s("strong",[_._v("参数部分")]),_._v("：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。")])]),_._v(" "),s("h2",{attrs:{id:"_6-与缓存相关的http请求头有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-与缓存相关的http请求头有哪些"}},[_._v("#")]),_._v(" 6.与缓存相关的HTTP请求头有哪些")]),_._v(" "),s("p",[_._v("强缓存：")]),_._v(" "),s("ul",[s("li",[_._v("Expires")]),_._v(" "),s("li",[_._v("Cache-Control")])]),_._v(" "),s("p",[_._v("协商缓存：")]),_._v(" "),s("ul",[s("li",[_._v("Etag、If-None-Match")]),_._v(" "),s("li",[_._v("Last-Modified、If-Modified-Since")])])])}),[],!1,null,null,null);v.default=T.exports}}]);